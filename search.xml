<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[未能加载文件或程序集Microsoft.IdentityModel]]></title>
    <url>%2F2019%2F03%2F13%2F%E6%9C%AA%E8%83%BD%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6%E6%88%96%E7%A8%8B%E5%BA%8F%E9%9B%86%20Microsoft.IdentityModel%2F</url>
    <content type="text"><![CDATA[本地调试时提示：未能加载文件或程序集“Microsoft.IdentityModel, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35”或它的某一个依赖项。系统找不到指定的文件。”:”Microsoft.IdentityModel, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35原因1缺少“Microsoft.IdentityModel.dll” 2种解决方法 右键单击您的项目并选择&lt;管理NuGet程序包&gt;[Manage NuGet Package]搜索“Microsoft.IdentityModel”并安装. 点击工具-NuGet包管理器-程序包管理器控制台，输入Install-Package Microsoft.IdentityModel -Version 6.1.7600.16394并执行命令; 安装说明：https://www.nuget.org/packages/Microsoft.IdentityModel/]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>MVC</tag>
        <tag>Visual Studio</tag>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo发布到GitHub出现404]]></title>
    <url>%2F2018%2F11%2F16%2Fhexo%E5%8F%91%E5%B8%83%E5%88%B0GitHub%E5%87%BA%E7%8E%B0404%2F</url>
    <content type="text"><![CDATA[问题: hexo 配置 GitHub repository 仓库无误，上传到 GitHub 也正常，但打开 https://xxx.github.io/显示404 过程: 我前后创建过两个 GitHub repository，都是同名，第一次上传到 GitHub 成功后并且访问https://xxx.github.io/是正常的。 后面我删掉了 repository 且重新创建一个同名的，然后再次上传，GitHub 上面的配置信息和 _config.yml 的配置信息都无误，但再次访问就出现404。 尝试解决方法: 依次执行以下命令后访问还是40412hexo cleanhexo d 网上找不到类似情况后，想了下会不会跟 Git 有关，然后看了下本地环境下的 hexo 文件夹里的 .deploy_git 文件夹，执行 hexo d 命令后此文件夹里的内容会重新生成，但 .git 文件夹里面的文件有些还是旧的，果断删除此文件夹并重新执行 hexo d ，这次访问果然正常了。 总结: GitHub 删掉 repository 后，本地环境对应的 hexo 文件夹里的 .deploy_git/.git 文件夹没有删除掉，这样重新执行 hexo d 命令后能正常上传到 GitHub 但访问却会出现404。]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[log4net配置]]></title>
    <url>%2F2018%2F11%2F16%2Flog4net%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[CS程序 进入需要配置log4net的项目目录下,安装或引用log4net; 右键-管理NuGet程序包,搜索”log4net”并安装; 引用已下载的log4net.dll文件. 程序启动时读取log4net的配置文件,在AssemblyInfo.cs中加入 [assembly: log4net.Config.XmlConfigurator(ConfigFile = &quot;app.config&quot;, Watch = true)]; 在原有的app.config上加入log4net的输出配置信息; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107 &lt;configuration&gt; &lt;!--log4net--&gt; &lt;configSections&gt; &lt;section name=&quot;log4net&quot; type=&quot;log4net.Config.Log4NetConfigurationSectionHandler, log4net&quot; requirePermission=&quot;false&quot;/&gt; &lt;/configSections&gt; &lt;log4net&gt; &lt;root&gt; &lt;!--在控制台打印log--&gt; &lt;level value=&quot;ALL&quot; /&gt; &lt;appender-ref ref=&quot;ConsoleAppender&quot; /&gt; &lt;/root&gt; &lt;logger name=&quot;debugLog&quot;&gt; &lt;level value=&quot;DEBUG&quot;/&gt; &lt;appender-ref ref=&quot;DebugLogFileAppender&quot; /&gt; &lt;/logger&gt; &lt;logger name=&quot;infoLog&quot;&gt; &lt;level value=&quot;INFO&quot;/&gt; &lt;appender-ref ref=&quot;InfoLogFileAppender&quot; /&gt; &lt;/logger&gt; &lt;logger name=&quot;warnLog&quot;&gt; &lt;level value=&quot;WARN&quot;/&gt; &lt;appender-ref ref=&quot;WarnLogFileAppender&quot; /&gt; &lt;/logger&gt; &lt;logger name=&quot;errorLog&quot;&gt; &lt;level value=&quot;ERROR&quot;/&gt; &lt;appender-ref ref=&quot;ErrorFileAppender&quot; /&gt; &lt;/logger&gt; &lt;appender name=&quot;DebugLogFileAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot; &gt; &lt;Encoding value=&quot;UTF-8&quot; /&gt; &lt;param name=&quot;AppendToFile&quot; value=&quot;true&quot; /&gt; &lt;param name=&quot;File&quot; value=&quot;D:\\MSD_Logs\\Debug\\&quot; /&gt; &lt;param name=&quot;MaxFileSize&quot; value=&quot;10240&quot; /&gt; &lt;param name=&quot;MaxSizeRollBackups&quot; value=&quot;100&quot; /&gt; &lt;param name=&quot;RollingStyle&quot; value=&quot;Date&quot; /&gt; &lt;param name=&quot;StaticLogFileName&quot; value=&quot;false&quot; /&gt; &lt;!--生成如Thoughtbox-20181120.log这样的.log文件--&gt; &lt;param name=&quot;DatePattern&quot; value=&quot;&apos;Thoughtbox&apos;-yyyyMMdd&amp;quot;.log&amp;quot;&quot; /&gt; &lt;!--防止更新代码时出现.log文件名重叠的情况如Thoughtbox-20181120.logThoughtbox-20181120.log--&gt; &lt;param name=&quot;lockingModel&quot; type=&quot;log4net.Appender.FileAppender+MinimalLock&quot; /&gt; &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt; &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d|`%-4p|`%m%n&quot; /&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;appender name=&quot;InfoLogFileAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot; &gt; &lt;Encoding value=&quot;UTF-8&quot; /&gt; &lt;param name=&quot;AppendToFile&quot; value=&quot;true&quot; /&gt; &lt;param name=&quot;File&quot; value=&quot;D:\\MSD_Logs\\Info\\&quot; /&gt; &lt;param name=&quot;MaxFileSize&quot; value=&quot;10240&quot; /&gt; &lt;param name=&quot;MaxSizeRollBackups&quot; value=&quot;100&quot; /&gt; &lt;param name=&quot;RollingStyle&quot; value=&quot;Date&quot; /&gt; &lt;param name=&quot;StaticLogFileName&quot; value=&quot;false&quot; /&gt; &lt;!--生成如Thoughtbox-20181120.log这样的.log文件--&gt; &lt;param name=&quot;DatePattern&quot; value=&quot;&apos;Thoughtbox&apos;-yyyyMMdd&amp;quot;.log&amp;quot;&quot; /&gt; &lt;!--防止更新代码时出现.log文件名重叠的情况如Thoughtbox-20181120.logThoughtbox-20181120.log--&gt; &lt;param name=&quot;lockingModel&quot; type=&quot;log4net.Appender.FileAppender+MinimalLock&quot; /&gt; &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt; &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d|`%-4p|`%m%n&quot; /&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;appender name=&quot;WarnLogFileAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot; &gt; &lt;Encoding value=&quot;UTF-8&quot; /&gt; &lt;param name=&quot;AppendToFile&quot; value=&quot;true&quot; /&gt; &lt;param name=&quot;File&quot; value=&quot;D:\\MSD_Logs\\Warn\\&quot; /&gt; &lt;param name=&quot;MaxFileSize&quot; value=&quot;10240&quot; /&gt; &lt;param name=&quot;MaxSizeRollBackups&quot; value=&quot;100&quot; /&gt; &lt;param name=&quot;RollingStyle&quot; value=&quot;Date&quot; /&gt; &lt;param name=&quot;StaticLogFileName&quot; value=&quot;false&quot; /&gt; &lt;!--生成如Thoughtbox-20181120.log这样的.log文件--&gt; &lt;param name=&quot;DatePattern&quot; value=&quot;&apos;Thoughtbox&apos;-yyyyMMdd&amp;quot;.log&amp;quot;&quot; /&gt; &lt;!--防止更新代码时出现.log文件名重叠的情况如Thoughtbox-20181120.logThoughtbox-20181120.log--&gt; &lt;param name=&quot;lockingModel&quot; type=&quot;log4net.Appender.FileAppender+MinimalLock&quot; /&gt; &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt; &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d|`%-4p|`%m%n&quot; /&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;appender name=&quot;ErrorFileAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot; &gt; &lt;Encoding value=&quot;UTF-8&quot; /&gt; &lt;param name=&quot;AppendToFile&quot; value=&quot;true&quot; /&gt; &lt;param name=&quot;File&quot; value=&quot;D:\\MSD_Logs\\Error\\&quot; /&gt; &lt;param name=&quot;MaxFileSize&quot; value=&quot;10240&quot; /&gt; &lt;param name=&quot;MaxSizeRollBackups&quot; value=&quot;100&quot; /&gt; &lt;param name=&quot;RollingStyle&quot; value=&quot;Date&quot; /&gt; &lt;param name=&quot;StaticLogFileName&quot; value=&quot;false&quot; /&gt; &lt;!--生成如Thoughtbox-20181120.log这样的.log文件--&gt; &lt;param name=&quot;DatePattern&quot; value=&quot;&apos;Thoughtbox&apos;-yyyyMMdd&amp;quot;.log&amp;quot;&quot; /&gt; &lt;!--防止更新代码时出现.log文件名重叠的情况如Thoughtbox-20181120.logThoughtbox-20181120.log--&gt; &lt;param name=&quot;lockingModel&quot; type=&quot;log4net.Appender.FileAppender+MinimalLock&quot; /&gt; &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt; &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d|`%-4p|`%m%n&quot; /&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;appender name=&quot;ConsoleAppender&quot; type=&quot;log4net.Appender.ConsoleAppender&quot; &gt; &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt; &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d|`%-4p|`%m%n&quot; /&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;/log4net&gt; &lt;system.web&gt; &lt;compilation targetFramework=&quot;4.5.2&quot; /&gt; &lt;httpRuntime targetFramework=&quot;4.5.2&quot; /&gt; &lt;/system.web&gt; &lt;appSettings&gt; &lt;add key=&quot;ThoughtboxName&quot; value=&quot;ThoughtboxAccess&quot; /&gt; &lt;add key=&quot;ThoughtboxPwd&quot; value=&quot;Thoughtbox@Adidas&quot; /&gt; &lt;/appSettings&gt;&lt;/configuration&gt; 如需读取新的配置文件,可在程序的调用方法前加入 log4net.Config.XmlConfigurator.Configure(new FileInfo(&quot;log4net.xml&quot;))强制读取新的配置文件. 类库封装 添加一个类库项目,安装或引用log4net; 右键-管理NuGet程序包,搜索”log4net”并安装; 引用已下载的log4net.dll文件. 在类库中添加一个log4net的配置文件，起名：log4net.config，并设置此文件的属性复制到输出目录为：始终复制。 不设置此属性,可能会出现日志写不成功 程序启动时读取log4net的配置文件,在AssemblyInfo.cs中加入 [assembly: log4net.Config.XmlConfigurator(ConfigFile = &quot;log4net.config&quot;, Watch = true)]; 在类库中添加一个LogHelper类，用来调用log4net输出日志; 在其它项目中引用这个类库，并在此项目目录下新建log4net.config并修改里面的配置信息,在调用此项目的写日志功能时就能读取新的配置信息. WebService 进入需要配置log4net的项目目录下,安装log4net; 右键-管理NuGet程序包,搜索”log4net”并安装; 引用已下载的log4net.dll文件. 程序启动时读取log4net的配置文件,在AssemblyInfo.cs中加入 [assembly: log4net.Config.XmlConfigurator(ConfigFile = &quot;web.config&quot;, Watch = true)]; 在原有的web.config上加入log4net的输出配置信息; eg.参考 上面CS程序中的第三点 不同接口调用不同的log4net配置信息(配置不同可以实现不一样的日志输出格式要求),在各个接口调用的[webService]类里添加构造方法; eg. [WebService].asmx.cs文件中加入 1234public WebService()&#123; log4net.Config.XmlConfigurator.ConfigureAndWatch(new System.IO.FileInfo(AppDomain.CurrentDomain.SetupInformation.ApplicationBase + &quot;log4net.config&quot;));&#125; WebService为对应的接口类名 WCFService寄宿IIS 进入需要配置log4net的项目目录下,安装log4net; 右键-管理NuGet程序包,搜索”log4net”并安装; 引用已下载的log4net.dll文件. 程序启动时读取log4net的配置文件,在AssemblyInfo.cs中加入 [assembly: log4net.Config.XmlConfigurator(ConfigFile = &quot;web.config&quot;, Watch = true)]; 在原有的web.config上加入log4net的输出配置信息; eg.参考 上面CS程序中的第三点 [CustomService].svc.cs加入自定义ServiceHost、ServiceHostFactory类,在自定义的ServiceHost实例中注册log4net启动日志记录; 12345678910111213141516171819202122232425#region 使用自定义ServiceHost实现加载log4net配置文件public class CustomServiceHostFactory : ServiceHostFactory&#123; protected override ServiceHost CreateServiceHost( Type serviceType, Uri[] baseAddresses) &#123; CustomServiceHost customServiceHost = new CustomServiceHost(serviceType, baseAddresses); return customServiceHost; &#125;&#125;public class CustomServiceHost : ServiceHost&#123; public CustomServiceHost(Type serviceType, params Uri[] baseAddresses) : base(serviceType, baseAddresses) &#123; log4net.Config.XmlConfigurator.Configure(); &#125; protected override void ApplyConfiguration() &#123; base.ApplyConfiguration(); &#125;&#125;#endregion 右键[CustomService].svc文件-查看标记中加入`Factory属性; eg. Factory=“Techsun.Adidas.WcfSvc.CustomServiceHostFactory” CustomService为对应的wcf服务类名 ASP.NET MVC 进入需要配置log4net的项目目录下,安装log4net; 右键-管理NuGet程序包,搜索”log4net”并安装; 引用已下载的log4net.dll文件. 程序启动时读取log4net的配置文件,在AssemblyInfo.cs中加入 [assembly: log4net.Config.XmlConfigurator(ConfigFile = &quot;web.config&quot;, Watch = true)]; 在原有的web.config上加入log4net的输出配置信息; eg.参考 上面CS程序中的第三点 在Global.asax的Application_Start()方法里加入以下代码; eg. Global.asax.cs文件中加入 12345678910protected void Application_Start()&#123; AreaRegistration.RegisterAllAreas(); GlobalConfiguration.Configure(WebApiConfig.Register); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); RouteConfig.RegisterRoutes(RouteTable.Routes); BundleConfig.RegisterBundles(BundleTable.Bundles); //强制调用web.config log4net.Config.XmlConfigurator.ConfigureAndWatch(new System.IO.FileInfo(AppDomain.CurrentDomain.SetupInformation.ApplicationBase + &quot;web.config&quot;));&#125;]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>log4net</tag>
        <tag>WebService</tag>
        <tag>wcf</tag>
      </tags>
  </entry>
</search>
